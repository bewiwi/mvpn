<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Server', 'doctrine');

/**
 * BaseServer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $ip
 * @property integer $port
 * @property string $proto
 * @property string $ca
 * @property Doctrine_Collection $Log
 * @property Doctrine_Collection $ServerUser
 * 
 * @method integer             getId()         Returns the current record's "id" value
 * @method string              getName()       Returns the current record's "name" value
 * @method string              getIp()         Returns the current record's "ip" value
 * @method integer             getPort()       Returns the current record's "port" value
 * @method string              getProto()      Returns the current record's "proto" value
 * @method string              getCa()         Returns the current record's "ca" value
 * @method Doctrine_Collection getLog()        Returns the current record's "Log" collection
 * @method Doctrine_Collection getServerUser() Returns the current record's "ServerUser" collection
 * @method Server              setId()         Sets the current record's "id" value
 * @method Server              setName()       Sets the current record's "name" value
 * @method Server              setIp()         Sets the current record's "ip" value
 * @method Server              setPort()       Sets the current record's "port" value
 * @method Server              setProto()      Sets the current record's "proto" value
 * @method Server              setCa()         Sets the current record's "ca" value
 * @method Server              setLog()        Sets the current record's "Log" collection
 * @method Server              setServerUser() Sets the current record's "ServerUser" collection
 * 
 * @package    m-vpn
 * @subpackage model
 * @author     LoÃ¯c PORTE
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseServer extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('server');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('ip', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('port', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('proto', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('ca', 'string', 3500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 3500,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Log', array(
             'local' => 'id',
             'foreign' => 'server_id'));

        $this->hasMany('ServerUser', array(
             'local' => 'id',
             'foreign' => 'server_id'));
    }
}